IDENTIFICATION DIVISION.
PROGRAM-ID. conv.
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT STANDARD-OUTPUT ASSIGN TO DISPLAY.

DATA DIVISION.
FILE SECTION.
FD STANDARD-OUTPUT.
   01 STDOUT-RECORD PICTURE X(80).

*>  DECLARATIONS
WORKING-STORAGE SECTION.
77 I   PICTURE S99 USAGE IS COMPUTATIONAL.
77 PREV PICTURE S9(8) USAGE IS COMPUTATIONAL.
77 D  PICTURE S9(4) USAGE IS COMPUTATIONAL.
01 ERROR-MESS.
   02 FILLER PICTURE X(22) VALUE ' ILLEGAL ROMAN NUMERAL'.

LINKAGE SECTION.
77 M  PICTURE S99 USAGE IS COMPUTATIONAL.
77 ERR PICTURE S9 USAGE IS COMPUTATIONAL-3.
77 SUM1 PICTURE S9(8) USAGE IS COMPUTATIONAL.
01 ARRAY-AREA.
  02 S PICTURE X(1) OCCURS 30 TIMES.

PROCEDURE DIVISION USING ARRAY-AREA, M, ERR, SUM1.
    MOVE ZERO TO SUM1. MOVE 1001 TO PREV.
*> loops the data for validity
    PERFORM LOOP THRU END-LOOP VARYING I FROM 1 BY 1
      UNTIL I IS GREATER THAN M.
*> return
    MOVE 1 TO ERR.
    GOBACK.

*> checking for user input
*> converted the original code from go-to's to if's
LOOP.
    IF S(I) IS EQUAL TO 'I' OR S(I) IS EQUAL TO 'i'
      MOVE 1 TO D
      ADD D TO SUM1
      PERFORM CALC THRU END-CALC
    ELSE IF S(I) IS EQUAL TO 'V' OR S(I) IS EQUAL TO 'v'
      MOVE 5 TO D
      ADD D TO SUM1
      PERFORM CALC THRU END-CALC
    ELSE IF S(I) IS EQUAL TO 'X' OR S(I) IS EQUAL TO 'x'
      MOVE 10 TO D
      ADD D TO SUM1
      PERFORM CALC THRU END-CALC
    ELSE IF S(I) IS EQUAL TO 'L' OR S(I) IS EQUAL TO 'l'
      MOVE 50 TO D
      ADD D TO SUM1
      PERFORM CALC THRU END-CALC
    ELSE IF S(I) IS EQUAL TO 'C' OR S(I) IS EQUAL TO 'c'
      MOVE 100 TO D
      ADD D TO SUM1
      PERFORM CALC THRU END-CALC
    ELSE IF S(I) IS EQUAL TO 'D' OR S(I) IS EQUAL TO 'd'
      MOVE 500 TO D
      ADD D TO SUM1
      PERFORM CALC THRU END-CALC
    ELSE IF S(I) IS EQUAL TO 'M' OR S(I) IS EQUAL TO 'm'
      MOVE 1000 TO D
      ADD D TO SUM1
      PERFORM CALC THRU END-CALC
*>  checking to see if the user wants out
    ELSE IF S(I) IS EQUAL TO 'Q' OR S(I) IS EQUAL TO 'q'
*>  personal return to quit
      MOVE 3 TO ERR
      GOBACK
*>  error checking for invalid data
    ELSE
      OPEN OUTPUT STANDARD-OUTPUT
      WRITE STDOUT-RECORD FROM ERROR-MESS AFTER ADVANCING 1 LINE
*>  return for invalid data
      MOVE 2 TO ERR
      CLOSE STANDARD-OUTPUT
      DISPLAY ' '
      GOBACK
    END-IF.
END-LOOP.
MOVE D TO PREV.

*> adding to the total
CALC.
  IF D IS GREATER THAN PREV
    COMPUTE SUM1 = SUM1 - 2 * PREV
  END-IF.
END-CALC.
